#!/usr/bin/env python
# -*- coding: utf-8 -*-
from Config import TRAIN_MALWARE_PATH,TRAIN_NON_MALWARE_PATH
import Classifier
import Utils
import FeatureExtraction
import Statistics
import ExecutablePreprocess
from sys import argv
import logging

def usage():   print "Usage: ... "
def header():  print "Header"

if __name__ == "__main__":
	## Sin parser de argumentos ##
	logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)
	if len(argv)<2: usage(); exit()
	t = int(argv[1])
	if t==0:
		malware_files                 = Utils._get_files(TRAIN_MALWARE_PATH)
		non_malware_files             = Utils._get_files(TRAIN_NON_MALWARE_PATH)
		Classifier._fit(malware_files,non_malware_files)
		
	elif t==1: 
		file_name = argv[2]
		k         = argv[3]
		print "Program class: ",Classifier._predict(file_name,k)
	else:
		k         = argv[2]
		Statistics._cross_validation(TRAIN_MALWARE_PATH,TRAIN_NON_MALWARE_PATH,k)
			
	"""print argv
	if argv[1]=="--train":
		train_malware_path     = argv[2]
		train_non_malware_path = argv[3]
		save				   = bool(int(argv[4]))
		fprototypes,f2wvmodel,ffmodel = None,None,None
		if save==True:
			fprototypes = argv[5]
			f2wvmodel 	= argv[6]
			ffmodel		= argv[7]
		if save==False:       Classifier._fit(train_malware_path,train_non_malware_path,False)
		else:				  Classifier._fit(train_malware_path,train_non_malware_path,True,fprototypes,f2wvmodel,ffmodel)
	elif argv[1]=="--predict": pass
	
	elif argv[1]=="--statistics": pass
	
	else: usage()
	"""

