#!/usr/bin/env python
# -*- coding: utf-8 -*-

from Config import TRAIN_MALWARE_PATH,TRAIN_NON_MALWARE_PATH
import Classifier
import Utils
import FeatureExtraction
import Statistics
import ExecutablePreprocess
from sys import argv
from os import system,name
from time import clock
import logging

PROJECT = "WinMalwareDetector"
VERSION = "b 0.1"
AUTHOR  = "Overxfl0w13"

def usage():   
	print """Usage: python WinMalwareDetector.py [--predict OPTS1|--train OPTS2|--statistics OPTS3]\n
	\n
* OPTS1 -> exe_file k path_prototypes_to_load path_w2v_model_to_load path_f_model_to_load\n
* OPTS2 -> train_malware_path train_non_malware_path path_prototypes_to_save path_w2v_model_to_save path_f_model_to_save\n
* OPTS3 -> type_statistics k train_malware_path train_non_malware_path\n
	
	
	"""
def header():  
	print """ #     # #     # ######  
 #  #  # ##   ## #     # 
 #  #  # # # # # #     # 
 #  #  # #  #  # #     # 
 #  #  # #     # #     # 
 #  #  # #     # #     # 
  ## ##  #     # ###### \n 
   Author: Overxfl0w13                    

"""

def report(fname,cl,t):
	print """ *********** REPORT ***********\n
File:  %s
Class: %s
Time:  %d
""" % (fname,cl,t)

if __name__ == "__main__":
	logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)
	system('cls' if name == 'nt' else 'clear')
	header()
	if len(argv)<2: usage(); exit()
	if argv[1]=="--train":
		if len(argv)!=7: usage(); exit()
		train_malware_path     = argv[2]
		train_non_malware_path = argv[3]
		fprototypes = argv[4]
		f2wvmodel 	= argv[5]
		ffmodel		= argv[6]
		Classifier._fit(train_malware_path,train_non_malware_path,True,fprototypes,f2wvmodel,ffmodel)
	
	elif argv[1]=="--predict":
		if len(argv)!=7: usage(); exit()
		exe_file,k,path_prototypes,path_w2v_model,path_f_model = argv[2],int(argv[3]),argv[4],argv[5],argv[6]
		it = clock()
		c_class = Classifier._predict(exe_file,k,path_prototypes,path_w2v_model,path_f_model)
		report(exe_file,c_class,clock()-it)
			
	elif argv[1]=="--statistics":
		if len(argv)!=6: usage(); exit()
		type_statistics        = argv[2]
		k					   = int(argv[3])
		train_malware_path     = argv[4]
		train_non_malware_path = argv[5]
		if type_statistics=="-lou": Statistics._leaving_one_out(train_malware_path,train_non_malware_path,k)
		#elif type_statistics=="-bfc": Statistics._cross_validation(...)
		#elif type_statistics=="-hdo": Statistics._hold_out(...)
		#elif type_statistics=="-prt": Statistics._partition(...)
		#elif type_statistics=="-rst": Statistics._resubstitution(...)
		
	else: usage()


